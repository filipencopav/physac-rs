!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
BiasGreaterThan	physac.h	/^static bool BiasGreaterThan(float valueA, float valueB)$/;"	f	typeref:typename:bool
Body	body.rs	/^pub struct Body<Vec2d: VecImpl> {$/;"	s
Clip	physac.h	/^static int Clip(Vector2 normal, float clip, Vector2 *faceA, Vector2 *faceB)$/;"	f	typeref:typename:int
ClosePhysics	physac.h	/^PHYSACDEF void ClosePhysics(void)$/;"	f	typeref:typename:PHYSACDEF void
CorrectPhysicsPositions	physac.h	/^static void CorrectPhysicsPositions(PhysicsManifold manifold)$/;"	f	typeref:typename:void
CreatePhysicsBodyCircle	physac.h	/^PHYSACDEF PhysicsBody CreatePhysicsBodyCircle(Vector2 pos, float radius, float density)$/;"	f	typeref:typename:PHYSACDEF PhysicsBody
CreatePhysicsBodyPolygon	physac.h	/^PHYSACDEF PhysicsBody CreatePhysicsBodyPolygon(Vector2 pos, float radius, int sides, float densi/;"	f	typeref:typename:PHYSACDEF PhysicsBody
CreatePhysicsBodyRectangle	physac.h	/^PHYSACDEF PhysicsBody CreatePhysicsBodyRectangle(Vector2 pos, float width, float height, float d/;"	f	typeref:typename:PHYSACDEF PhysicsBody
CreatePhysicsManifold	physac.h	/^static PhysicsManifold CreatePhysicsManifold(PhysicsBody a, PhysicsBody b)$/;"	f	typeref:typename:PhysicsManifold
CreateRandomPolygon	physac.h	/^static PolygonData CreateRandomPolygon(float radius, int sides)$/;"	f	typeref:typename:PolygonData
CreateRectanglePolygon	physac.h	/^static PolygonData CreateRectanglePolygon(Vector2 pos, Vector2 size)$/;"	f	typeref:typename:PolygonData
DestroyPhysicsBody	physac.h	/^PHYSACDEF void DestroyPhysicsBody(PhysicsBody body)$/;"	f	typeref:typename:PHYSACDEF void
DestroyPhysicsManifold	physac.h	/^static void DestroyPhysicsManifold(PhysicsManifold manifold)$/;"	f	typeref:typename:void
DistSqr	physac.h	/^static inline float DistSqr(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:float
FindAvailableBodyIndex	physac.h	/^static int FindAvailableBodyIndex()$/;"	f	typeref:typename:int
FindAvailableManifoldIndex	physac.h	/^static int FindAvailableManifoldIndex()$/;"	f	typeref:typename:int
FindAxisLeastPenetration	physac.h	/^static float FindAxisLeastPenetration(int *faceIndex, PhysicsShape shapeA, PhysicsShape shapeB)$/;"	f	typeref:typename:float
FindIncidentFace	physac.h	/^static void FindIncidentFace(Vector2 *v0, Vector2 *v1, PhysicsShape ref, PhysicsShape inc, int i/;"	f	typeref:typename:void
GetCurrentTime	physac.h	/^static double GetCurrentTime(void)$/;"	f	typeref:typename:double
GetPhysicsBodiesCount	physac.h	/^PHYSACDEF int GetPhysicsBodiesCount(void)$/;"	f	typeref:typename:PHYSACDEF int
GetPhysicsBody	physac.h	/^PHYSACDEF PhysicsBody GetPhysicsBody(int index)$/;"	f	typeref:typename:PHYSACDEF PhysicsBody
GetPhysicsShapeType	physac.h	/^PHYSACDEF int GetPhysicsShapeType(int index)$/;"	f	typeref:typename:PHYSACDEF int
GetPhysicsShapeVertex	physac.h	/^PHYSACDEF Vector2 GetPhysicsShapeVertex(PhysicsBody body, int vertex)$/;"	f	typeref:typename:PHYSACDEF Vector2
GetPhysicsShapeVerticesCount	physac.h	/^PHYSACDEF int GetPhysicsShapeVerticesCount(int index)$/;"	f	typeref:typename:PHYSACDEF int
GetSupport	physac.h	/^static Vector2 GetSupport(PhysicsShape shape, Vector2 dir)$/;"	f	typeref:typename:Vector2
GetTimeCount	physac.h	/^static uint64_t GetTimeCount(void)$/;"	f	typeref:typename:uint64_t
InitPhysics	physac.h	/^PHYSACDEF void InitPhysics(void)$/;"	f	typeref:typename:PHYSACDEF void
InitTimer	physac.h	/^static void InitTimer(void)$/;"	f	typeref:typename:void
InitializePhysicsManifolds	physac.h	/^static void InitializePhysicsManifolds(PhysicsManifold manifold)$/;"	f	typeref:typename:void
IntegratePhysicsForces	physac.h	/^static void IntegratePhysicsForces(PhysicsBody body)$/;"	f	typeref:typename:void
IntegratePhysicsImpulses	physac.h	/^static void IntegratePhysicsImpulses(PhysicsManifold manifold)$/;"	f	typeref:typename:void
IntegratePhysicsVelocity	physac.h	/^static void IntegratePhysicsVelocity(PhysicsBody body)$/;"	f	typeref:typename:void
IsPhysicsEnabled	physac.h	/^PHYSACDEF bool IsPhysicsEnabled(void)$/;"	f	typeref:typename:PHYSACDEF bool
Mat2	matrix.rs	/^struct Mat2 {$/;"	s
Mat2	physac.h	/^typedef struct Mat2 {$/;"	s
Mat2	physac.h	/^} Mat2;$/;"	t	typeref:struct:Mat2
Mat2MultiplyVector2	physac.h	/^static inline Vector2 Mat2MultiplyVector2(Mat2 matrix, Vector2 vector)$/;"	f	typeref:typename:Vector2
Mat2Radians	physac.h	/^static Mat2 Mat2Radians(float radians)$/;"	f	typeref:typename:Mat2
Mat2Set	physac.h	/^static void Mat2Set(Mat2 *matrix, float radians)$/;"	f	typeref:typename:void
Mat2Transpose	physac.h	/^static inline Mat2 Mat2Transpose(Mat2 matrix)$/;"	f	typeref:typename:Mat2
MathCross	physac.h	/^static inline Vector2 MathCross(float value, Vector2 vector)$/;"	f	typeref:typename:Vector2
MathCrossVector2	physac.h	/^static inline float MathCrossVector2(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:float
MathDot	physac.h	/^static inline float MathDot(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:float
MathLenSqr	physac.h	/^static inline float MathLenSqr(Vector2 vector)$/;"	f	typeref:typename:float
MathNormalize	physac.h	/^static void MathNormalize(Vector2 *vector)$/;"	f	typeref:typename:void
PHYSACDEF	physac.h	/^        #define PHYSACDEF /;"	d
PHYSACDEF	physac.h	/^    #define PHYSACDEF /;"	d
PHYSAC_CIRCLE_VERTICES	physac.h	/^#define     PHYSAC_CIRCLE_VERTICES /;"	d
PHYSAC_COLLISION_ITERATIONS	physac.h	/^#define     PHYSAC_COLLISION_ITERATIONS /;"	d
PHYSAC_DEG2RAD	physac.h	/^#define     PHYSAC_DEG2RAD /;"	d
PHYSAC_EPSILON	physac.h	/^#define     PHYSAC_EPSILON /;"	d
PHYSAC_FLT_MAX	physac.h	/^#define     PHYSAC_FLT_MAX /;"	d
PHYSAC_FREE	physac.h	/^#define     PHYSAC_FREE(/;"	d
PHYSAC_H	physac.h	/^#define PHYSAC_H$/;"	d
PHYSAC_K	physac.h	/^#define     PHYSAC_K /;"	d
PHYSAC_MALLOC	physac.h	/^#define     PHYSAC_MALLOC(/;"	d
PHYSAC_MAX_BODIES	physac.h	/^#define     PHYSAC_MAX_BODIES /;"	d
PHYSAC_MAX_MANIFOLDS	physac.h	/^#define     PHYSAC_MAX_MANIFOLDS /;"	d
PHYSAC_MAX_VERTICES	physac.h	/^#define     PHYSAC_MAX_VERTICES /;"	d
PHYSAC_PENETRATION_ALLOWANCE	physac.h	/^#define     PHYSAC_PENETRATION_ALLOWANCE /;"	d
PHYSAC_PENETRATION_CORRECTION	physac.h	/^#define     PHYSAC_PENETRATION_CORRECTION /;"	d
PHYSAC_PI	physac.h	/^#define     PHYSAC_PI /;"	d
PHYSAC_VECTOR_ZERO	physac.h	/^#define     PHYSAC_VECTOR_ZERO /;"	d
PHYSICS_CIRCLE	physac.h	/^typedef enum PhysicsShapeType { PHYSICS_CIRCLE, PHYSICS_POLYGON } PhysicsShapeType;$/;"	e	enum:PhysicsShapeType
PHYSICS_POLYGON	physac.h	/^typedef enum PhysicsShapeType { PHYSICS_CIRCLE, PHYSICS_POLYGON } PhysicsShapeType;$/;"	e	enum:PhysicsShapeType
PhysicsAddForce	physac.h	/^PHYSACDEF void PhysicsAddForce(PhysicsBody body, Vector2 force)$/;"	f	typeref:typename:PHYSACDEF void
PhysicsAddTorque	physac.h	/^PHYSACDEF void PhysicsAddTorque(PhysicsBody body, float amount)$/;"	f	typeref:typename:PHYSACDEF void
PhysicsBody	physac.h	/^typedef struct PhysicsBodyData *PhysicsBody;$/;"	t	typeref:struct:PhysicsBodyData *
PhysicsBodyData	physac.h	/^typedef struct PhysicsBodyData {$/;"	s
PhysicsBodyData	physac.h	/^} PhysicsBodyData;$/;"	t	typeref:struct:PhysicsBodyData
PhysicsLoop	physac.h	/^static void *PhysicsLoop(void *arg)$/;"	f	typeref:typename:void *
PhysicsManifold	physac.h	/^} PhysicsManifoldData, *PhysicsManifold;$/;"	t	typeref:struct:PhysicsManifoldData *
PhysicsManifoldData	physac.h	/^typedef struct PhysicsManifoldData {$/;"	s
PhysicsManifoldData	physac.h	/^} PhysicsManifoldData, *PhysicsManifold;$/;"	t	typeref:struct:PhysicsManifoldData
PhysicsShape	physac.h	/^typedef struct PhysicsShape {$/;"	s
PhysicsShape	physac.h	/^} PhysicsShape;$/;"	t	typeref:struct:PhysicsShape
PhysicsShapeType	physac.h	/^typedef enum PhysicsShapeType { PHYSICS_CIRCLE, PHYSICS_POLYGON } PhysicsShapeType;$/;"	g
PhysicsShapeType	physac.h	/^typedef enum PhysicsShapeType { PHYSICS_CIRCLE, PHYSICS_POLYGON } PhysicsShapeType;$/;"	t	typeref:enum:PhysicsShapeType
PhysicsShatter	physac.h	/^PHYSACDEF void PhysicsShatter(PhysicsBody body, Vector2 position, float force)$/;"	f	typeref:typename:PHYSACDEF void
PhysicsStep	physac.h	/^static void PhysicsStep(void)$/;"	f	typeref:typename:void
PolygonData	physac.h	/^typedef struct PolygonData {$/;"	s
PolygonData	physac.h	/^} PolygonData;$/;"	t	typeref:struct:PolygonData
RunPhysicsStep	physac.h	/^PHYSACDEF void RunPhysicsStep(void)$/;"	f	typeref:typename:PHYSACDEF void
SetPhysicsBodyRotation	physac.h	/^PHYSACDEF void SetPhysicsBodyRotation(PhysicsBody body, float radians)$/;"	f	typeref:typename:PHYSACDEF void
SetPhysicsGravity	physac.h	/^PHYSACDEF void SetPhysicsGravity(float x, float y)$/;"	f	typeref:typename:PHYSACDEF void
SetPhysicsTimeStep	physac.h	/^PHYSACDEF void SetPhysicsTimeStep(double delta)$/;"	f	typeref:typename:PHYSACDEF void
Shape	body.rs	/^enum Shape {$/;"	g
SolveCircleToCircle	physac.h	/^static void SolveCircleToCircle(PhysicsManifold manifold)$/;"	f	typeref:typename:void
SolveCircleToPolygon	physac.h	/^static void SolveCircleToPolygon(PhysicsManifold manifold)$/;"	f	typeref:typename:void
SolveDifferentShapes	physac.h	/^static void SolveDifferentShapes(PhysicsManifold manifold, PhysicsBody bodyA, PhysicsBody bodyB)$/;"	f	typeref:typename:void
SolvePhysicsManifold	physac.h	/^static void SolvePhysicsManifold(PhysicsManifold manifold)$/;"	f	typeref:typename:void
SolvePolygonToCircle	physac.h	/^static void SolvePolygonToCircle(PhysicsManifold manifold)$/;"	f	typeref:typename:void
SolvePolygonToPolygon	physac.h	/^static void SolvePolygonToPolygon(PhysicsManifold manifold)$/;"	f	typeref:typename:void
TriangleBarycenter	physac.h	/^static Vector2 TriangleBarycenter(Vector2 v1, Vector2 v2, Vector2 v3)$/;"	f	typeref:typename:Vector2
VecImpl	lib.rs	/^pub trait VecImpl {$/;"	i
Vector2	physac.h	/^    typedef struct Vector2 {$/;"	s
Vector2	physac.h	/^    } Vector2;$/;"	t	typeref:struct:Vector2
Vector2Add	physac.h	/^static inline Vector2 Vector2Add(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:Vector2
Vector2Subtract	physac.h	/^static inline Vector2 Vector2Subtract(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:Vector2
World	world.rs	/^pub struct World<Vec2d: VecImpl> {$/;"	s
_POSIX_C_SOURCE	physac.h	/^        #define _POSIX_C_SOURCE /;"	d
_STDBOOL_H	physac.h	/^        #define _STDBOOL_H$/;"	d
__anon40c12d230103	physac.h	/^        typedef enum { false, true } bool;$/;"	g
__anon40c12d230103	physac.h	/^        typedef enum { false, true } bool;$/;"	t	typeref:enum:bool
accumulator	physac.h	/^static double accumulator = 0.0;                            \/\/ Physics time step delta time ac/;"	v	typeref:typename:double
angularVelocity	physac.h	/^    float angularVelocity;                      \/\/ Current angular velocity applied to orient$/;"	m	struct:PhysicsBodyData	typeref:typename:float
baseTime	physac.h	/^static double baseTime = 0.0;                               \/\/ Offset time for MONOTONIC clock$/;"	v	typeref:typename:double
bodies	physac.h	/^static PhysicsBody bodies[PHYSAC_MAX_BODIES];               \/\/ Physics bodies pointers array$/;"	v	typeref:typename:PhysicsBody[]
bodies	world.rs	/^	bodies: Vec<Body<Vec2d>>,$/;"	m	struct:World
body	lib.rs	/^mod body;$/;"	n
body	physac.h	/^    PhysicsBody body;                           \/\/ Shape physics body reference$/;"	m	struct:PhysicsShape	typeref:typename:PhysicsBody
bodyA	physac.h	/^    PhysicsBody bodyA;                          \/\/ Manifold first physics body reference$/;"	m	struct:PhysicsManifoldData	typeref:typename:PhysicsBody
bodyB	physac.h	/^    PhysicsBody bodyB;                          \/\/ Manifold second physics body reference$/;"	m	struct:PhysicsManifoldData	typeref:typename:PhysicsBody
consts	lib.rs	/^mod consts;$/;"	n
contacts	physac.h	/^    Vector2 contacts[2];                        \/\/ Points of contact during collision$/;"	m	struct:PhysicsManifoldData	typeref:typename:Vector2[2]
contacts	physac.h	/^static PhysicsManifold contacts[PHYSAC_MAX_MANIFOLDS];      \/\/ Physics bodies pointers array$/;"	v	typeref:typename:PhysicsManifold[]
contactsCount	physac.h	/^    unsigned int contactsCount;                 \/\/ Current collision number of contacts$/;"	m	struct:PhysicsManifoldData	typeref:typename:unsigned int
currentTime	physac.h	/^static double currentTime = 0.0;                            \/\/ Current time in milliseconds$/;"	v	typeref:typename:double
deltaTime	physac.h	/^static double deltaTime = 1.0\/60.0\/10.0 * 1000;             \/\/ Delta time used for physics s/;"	v	typeref:typename:double
dot	lib.rs	/^	fn dot(&self, other: &Self) -> f32;$/;"	P	interface:VecImpl
dynamicFriction	physac.h	/^    float dynamicFriction;                      \/\/ Friction when the body has movement (0 to 1/;"	m	struct:PhysicsBodyData	typeref:typename:float
dynamicFriction	physac.h	/^    float dynamicFriction;                      \/\/ Mixed dynamic friction during collision$/;"	m	struct:PhysicsManifoldData	typeref:typename:float
enabled	body.rs	/^	enabled: bool,$/;"	m	struct:Body
enabled	physac.h	/^    bool enabled;                               \/\/ Enabled dynamics state (collisions are calc/;"	m	struct:PhysicsBodyData	typeref:typename:bool
force	physac.h	/^    Vector2 force;                              \/\/ Current linear force (reset to 0 every step/;"	m	struct:PhysicsBodyData	typeref:typename:Vector2
freezeOrient	physac.h	/^    bool freezeOrient;                          \/\/ Physics rotation constraint$/;"	m	struct:PhysicsBodyData	typeref:typename:bool
frequency	physac.h	/^static uint64_t frequency = 0;                              \/\/ Hi-res clock frequency$/;"	v	typeref:typename:uint64_t
get_x	lib.rs	/^	fn get_x(&self) -> f32;$/;"	P	interface:VecImpl
get_y	lib.rs	/^	fn get_y(&self) -> f32;$/;"	P	interface:VecImpl
gravityForce	physac.h	/^static Vector2 gravityForce = { 0.0f, 9.81f };              \/\/ Physics world gravity force$/;"	v	typeref:typename:Vector2
id	body.rs	/^	id: usize,$/;"	m	struct:Body
id	physac.h	/^    unsigned int id;                            \/\/ Reference unique identifier$/;"	m	struct:PhysicsBodyData	typeref:typename:unsigned int
id	physac.h	/^    unsigned int id;                            \/\/ Reference unique identifier$/;"	m	struct:PhysicsManifoldData	typeref:typename:unsigned int
inertia	physac.h	/^    float inertia;                              \/\/ Moment of inertia$/;"	m	struct:PhysicsBodyData	typeref:typename:float
inverseInertia	physac.h	/^    float inverseInertia;                       \/\/ Inverse value of inertia$/;"	m	struct:PhysicsBodyData	typeref:typename:float
inverseMass	physac.h	/^    float inverseMass;                          \/\/ Inverse value of mass$/;"	m	struct:PhysicsBodyData	typeref:typename:float
isGrounded	physac.h	/^    bool isGrounded;                            \/\/ Physics grounded on other body state$/;"	m	struct:PhysicsBodyData	typeref:typename:bool
m00	matrix.rs	/^	m00: f64,$/;"	m	struct:Mat2
m00	physac.h	/^    float m00;$/;"	m	struct:Mat2	typeref:typename:float
m01	matrix.rs	/^	m01: f64,$/;"	m	struct:Mat2
m01	physac.h	/^    float m01;$/;"	m	struct:Mat2	typeref:typename:float
m10	matrix.rs	/^	m10: f64,$/;"	m	struct:Mat2
m10	physac.h	/^    float m10;$/;"	m	struct:Mat2	typeref:typename:float
m11	matrix.rs	/^	m11: f64,$/;"	m	struct:Mat2
m11	physac.h	/^    float m11;$/;"	m	struct:Mat2	typeref:typename:float
mass	physac.h	/^    float mass;                                 \/\/ Physics body mass$/;"	m	struct:PhysicsBodyData	typeref:typename:float
maths	lib.rs	/^mod maths;$/;"	n
matrix	lib.rs	/^mod matrix;$/;"	n
max	physac.h	/^#define     max(/;"	d
min	physac.h	/^#define     min(/;"	d
minus	lib.rs	/^	fn minus(&self, other: &Self) -> Self;$/;"	P	interface:VecImpl
normal	physac.h	/^    Vector2 normal;                             \/\/ Normal direction vector from 'a' to 'b'$/;"	m	struct:PhysicsManifoldData	typeref:typename:Vector2
normalized	lib.rs	/^	fn normalized(&self) -> f32;$/;"	P	interface:VecImpl
normals	physac.h	/^    Vector2 normals[PHYSAC_MAX_VERTICES];       \/\/ Polygon vertex normals vectors$/;"	m	struct:PolygonData	typeref:typename:Vector2[]
orient	physac.h	/^    float orient;                               \/\/ Rotation in radians$/;"	m	struct:PhysicsBodyData	typeref:typename:float
penetration	physac.h	/^    float penetration;                          \/\/ Depth of penetration from collision$/;"	m	struct:PhysicsManifoldData	typeref:typename:float
physicsBodiesCount	physac.h	/^static unsigned int physicsBodiesCount = 0;                 \/\/ Physics world current bodies co/;"	v	typeref:typename:unsigned int
physicsManifoldsCount	physac.h	/^static unsigned int physicsManifoldsCount = 0;              \/\/ Physics world current manifolds/;"	v	typeref:typename:unsigned int
physicsThreadEnabled	physac.h	/^static bool physicsThreadEnabled = false;                   \/\/ Physics thread enabled state$/;"	v	typeref:typename:bool
physicsThreadId	physac.h	/^static pthread_t physicsThreadId;                           \/\/ Physics thread id$/;"	v	typeref:typename:pthread_t
plus	lib.rs	/^	fn plus(&self, other: &Self) -> Self;$/;"	P	interface:VecImpl
pos	body.rs	/^	pos: Vec2d,$/;"	m	struct:Body
position	physac.h	/^    Vector2 position;                           \/\/ Physics body shape pivot$/;"	m	struct:PhysicsBodyData	typeref:typename:Vector2
positions	physac.h	/^    Vector2 positions[PHYSAC_MAX_VERTICES];     \/\/ Polygon vertex positions vectors$/;"	m	struct:PolygonData	typeref:typename:Vector2[]
radius	physac.h	/^    float radius;                               \/\/ Circle shape radius (used for circle shapes/;"	m	struct:PhysicsShape	typeref:typename:float
restitution	physac.h	/^    float restitution;                          \/\/ Mixed restitution during collision$/;"	m	struct:PhysicsManifoldData	typeref:typename:float
restitution	physac.h	/^    float restitution;                          \/\/ Restitution coefficient of the body (0 to 1/;"	m	struct:PhysicsBodyData	typeref:typename:float
set_x	lib.rs	/^	fn set_x(&mut self, x: f32);$/;"	P	interface:VecImpl
set_y	lib.rs	/^	fn set_y(&mut self, y: f32);$/;"	P	interface:VecImpl
shape	body.rs	/^	shape: Shape,$/;"	m	struct:Body
shape	physac.h	/^    PhysicsShape shape;                         \/\/ Physics body shape information (type, radiu/;"	m	struct:PhysicsBodyData	typeref:typename:PhysicsShape
startTime	physac.h	/^static double startTime = 0.0;                              \/\/ Start time in milliseconds$/;"	v	typeref:typename:double
staticFriction	physac.h	/^    float staticFriction;                       \/\/ Friction when the body has not movement (0 /;"	m	struct:PhysicsBodyData	typeref:typename:float
staticFriction	physac.h	/^    float staticFriction;                       \/\/ Mixed static friction during collision$/;"	m	struct:PhysicsManifoldData	typeref:typename:float
stepsCount	physac.h	/^static unsigned int stepsCount = 0;                         \/\/ Total physics steps processed$/;"	v	typeref:typename:unsigned int
torque	physac.h	/^    float torque;                               \/\/ Current angular force (reset to 0 every ste/;"	m	struct:PhysicsBodyData	typeref:typename:float
transform	physac.h	/^    Mat2 transform;                             \/\/ Vertices transform matrix 2x2$/;"	m	struct:PhysicsShape	typeref:typename:Mat2
type	physac.h	/^    PhysicsShapeType type;                      \/\/ Physics shape type (circle or polygon)$/;"	m	struct:PhysicsShape	typeref:typename:PhysicsShapeType
useGravity	physac.h	/^    bool useGravity;                            \/\/ Apply gravity force to dynamics$/;"	m	struct:PhysicsBodyData	typeref:typename:bool
usedMemory	physac.h	/^static unsigned int usedMemory = 0;                         \/\/ Total allocated dynamic memory$/;"	v	typeref:typename:unsigned int
vel	body.rs	/^	vel: Vec2d,$/;"	m	struct:Body
velocity	physac.h	/^    Vector2 velocity;                           \/\/ Current linear velocity applied to position$/;"	m	struct:PhysicsBodyData	typeref:typename:Vector2
vertexCount	physac.h	/^    unsigned int vertexCount;                   \/\/ Current used vertex and normals count$/;"	m	struct:PolygonData	typeref:typename:unsigned int
vertexData	physac.h	/^    PolygonData vertexData;                     \/\/ Polygon shape vertices position and normals/;"	m	struct:PhysicsShape	typeref:typename:PolygonData
world	lib.rs	/^mod world;$/;"	n
x	physac.h	/^        float x;$/;"	m	struct:Vector2	typeref:typename:float
y	physac.h	/^        float y;$/;"	m	struct:Vector2	typeref:typename:float
